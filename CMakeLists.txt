# Generated by ChatGPT
cmake_minimum_required(VERSION 3.10)
project(vc_solver)

# Optionally enforce a particular C++ standard (C++11 or higher)
set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# Allow user to choose a build type.
if(NOT CMAKE_BUILD_TYPE)
  message(STATUS "No build type selected, defaulting to Release")
  set(CMAKE_BUILD_TYPE Release CACHE STRING "Build type" FORCE)
endif()

# Append additional compile flags.
# These mimic your SCons flags: openmp, optimization, warning and language flags.
set(EXTRA_CXX_FLAGS "-fopenmp -Wall -funroll-loops -fno-stack-limit -std=c++11")
if(CMAKE_BUILD_TYPE STREQUAL "Release")
  set(EXTRA_CXX_FLAGS "${EXTRA_CXX_FLAGS} -DNDEBUG -O3")
elseif(CMAKE_BUILD_TYPE STREQUAL "Debug")
  # Adjust flags for debugging if needed
  set(EXTRA_CXX_FLAGS "${EXTRA_CXX_FLAGS} -g")
endif()
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${EXTRA_CXX_FLAGS}")

# Add include directories (adjust relative paths as needed).
include_directories(
  ${CMAKE_SOURCE_DIR}/lib
  ${CMAKE_SOURCE_DIR}/lib/mis
  ${CMAKE_SOURCE_DIR}/lib/mis/initial_mis
  ${CMAKE_SOURCE_DIR}/lib/mis/evolutionary
  ${CMAKE_SOURCE_DIR}/lib/mis/kernel
  ${CMAKE_SOURCE_DIR}/lib/mis/ils
  ${CMAKE_SOURCE_DIR}/app
  ${CMAKE_SOURCE_DIR}/lib/io
  ${CMAKE_SOURCE_DIR}/interface
  ${CMAKE_SOURCE_DIR}/lib/algorithms
  ${CMAKE_SOURCE_DIR}/lib/data_structure
  ${CMAKE_SOURCE_DIR}/lib/data_structure/priority_queues
  ${CMAKE_SOURCE_DIR}/lib/data_structure/matrix
  ${CMAKE_SOURCE_DIR}/lib/partition
  ${CMAKE_SOURCE_DIR}/lib/partition/uncoarsening/refinement/quotient_graph_refinement/flow_refinement
  ${CMAKE_SOURCE_DIR}/lib/parallel_mh
  ${CMAKE_SOURCE_DIR}/lib/parallel_mh/galinier_combine
  ${CMAKE_SOURCE_DIR}/lib/tools

  # External KaHIP includes
  ${CMAKE_SOURCE_DIR}/extern/KaHIP
  ${CMAKE_SOURCE_DIR}/extern/KaHIP/app
  ${CMAKE_SOURCE_DIR}/extern/KaHIP/interface
  ${CMAKE_SOURCE_DIR}/extern/KaHIP/lib
  ${CMAKE_SOURCE_DIR}/extern/KaHIP/lib/algorithms
  ${CMAKE_SOURCE_DIR}/extern/KaHIP/lib/data_structure
  ${CMAKE_SOURCE_DIR}/extern/KaHIP/lib/data_structure/priority_queues
  ${CMAKE_SOURCE_DIR}/extern/KaHIP/lib/data_structure/matrix
  ${CMAKE_SOURCE_DIR}/extern/KaHIP/lib/io
  ${CMAKE_SOURCE_DIR}/extern/KaHIP/lib/parallel_mh
  ${CMAKE_SOURCE_DIR}/extern/KaHIP/lib/parallel_mh/galinier_combine
  ${CMAKE_SOURCE_DIR}/extern/KaHIP/lib/partition
  ${CMAKE_SOURCE_DIR}/extern/KaHIP/lib/tools
  ${CMAKE_SOURCE_DIR}/extern/KaHIP/lib/partition/uncoarsening/refinement/quotient_graph_refinement/flow_refinement

  # argtable2 includes
  ${CMAKE_SOURCE_DIR}/extern/argtable-2.10/include

  # cliqueSolver
  ${CMAKE_SOURCE_DIR}/extern/cliqueSolver
)

# Optionally add library search paths for external libraries
link_directories(
  ${CMAKE_SOURCE_DIR}/extern/argtable-2.10/lib
)

# ---------------------------------------------------------------------
# Build libkahip (static library)
# ---------------------------------------------------------------------
set(LIBKAHIP_FILES
  extern/KaHIP/lib/data_structure/graph_hierarchy.cpp
  extern/KaHIP/lib/algorithms/strongly_connected_components.cpp
  extern/KaHIP/lib/algorithms/topological_sort.cpp
  extern/KaHIP/lib/algorithms/push_relabel.cpp
  extern/KaHIP/lib/io/graph_io.cpp
  extern/KaHIP/lib/tools/quality_metrics.cpp
  extern/KaHIP/lib/tools/random_functions.cpp
  extern/KaHIP/lib/tools/graph_extractor.cpp
  extern/KaHIP/lib/tools/misc.cpp
  extern/KaHIP/lib/tools/partition_snapshooter.cpp
  extern/KaHIP/lib/partition/graph_partitioner.cpp
  extern/KaHIP/lib/partition/w_cycles/wcycle_partitioner.cpp
  extern/KaHIP/lib/partition/coarsening/coarsening.cpp
  extern/KaHIP/lib/partition/coarsening/contraction.cpp
  extern/KaHIP/lib/partition/coarsening/edge_rating/edge_ratings.cpp
  extern/KaHIP/lib/partition/coarsening/clustering/node_ordering.cpp
  extern/KaHIP/lib/partition/coarsening/clustering/size_constraint_label_propagation.cpp
  extern/KaHIP/lib/partition/coarsening/matching/matching.cpp
  extern/KaHIP/lib/partition/coarsening/matching/random_matching.cpp
  extern/KaHIP/lib/partition/coarsening/matching/gpa/path.cpp
  extern/KaHIP/lib/partition/coarsening/matching/gpa/gpa_matching.cpp
  extern/KaHIP/lib/partition/coarsening/matching/gpa/path_set.cpp
  extern/KaHIP/lib/partition/initial_partitioning/initial_partitioning.cpp
  extern/KaHIP/lib/partition/initial_partitioning/initial_partitioner.cpp
  extern/KaHIP/lib/partition/initial_partitioning/initial_partition_bipartition.cpp
  extern/KaHIP/lib/partition/initial_partitioning/initial_refinement/initial_refinement.cpp
  extern/KaHIP/lib/partition/initial_partitioning/bipartition.cpp
  extern/KaHIP/lib/partition/uncoarsening/uncoarsening.cpp
  extern/KaHIP/lib/partition/uncoarsening/separator/vertex_separator_algorithm.cpp
  extern/KaHIP/lib/partition/uncoarsening/separator/vertex_separator_flow_solver.cpp
  extern/KaHIP/lib/partition/uncoarsening/refinement/cycle_improvements/greedy_neg_cycle.cpp
  extern/KaHIP/lib/partition/uncoarsening/refinement/cycle_improvements/problem_factory.cpp
  extern/KaHIP/lib/partition/uncoarsening/refinement/cycle_improvements/augmented_Qgraph.cpp
  extern/KaHIP/lib/partition/uncoarsening/refinement/refinement.cpp
  extern/KaHIP/lib/partition/uncoarsening/refinement/mixed_refinement.cpp
  extern/KaHIP/lib/partition/uncoarsening/refinement/quotient_graph_refinement/2way_fm_refinement/two_way_fm.cpp
  extern/KaHIP/lib/partition/uncoarsening/refinement/quotient_graph_refinement/flow_refinement/two_way_flow_refinement.cpp
  extern/KaHIP/lib/partition/uncoarsening/refinement/quotient_graph_refinement/flow_refinement/boundary_bfs.cpp
  extern/KaHIP/lib/partition/uncoarsening/refinement/quotient_graph_refinement/flow_refinement/most_balanced_minimum_cuts/most_balanced_minimum_cuts.cpp
  extern/KaHIP/lib/partition/uncoarsening/refinement/quotient_graph_refinement/flow_refinement/flow_solving_kernel/cut_flow_problem_solver.cpp
  extern/KaHIP/lib/partition/uncoarsening/refinement/quotient_graph_refinement/quotient_graph_refinement.cpp
  extern/KaHIP/lib/partition/uncoarsening/refinement/quotient_graph_refinement/complete_boundary.cpp
  extern/KaHIP/lib/partition/uncoarsening/refinement/quotient_graph_refinement/partial_boundary.cpp
  extern/KaHIP/lib/partition/uncoarsening/refinement/quotient_graph_refinement/quotient_graph_scheduling/quotient_graph_scheduling.cpp
  extern/KaHIP/lib/partition/uncoarsening/refinement/quotient_graph_refinement/quotient_graph_scheduling/simple_quotient_graph_scheduler.cpp
  extern/KaHIP/lib/partition/uncoarsening/refinement/quotient_graph_refinement/quotient_graph_scheduling/active_block_quotient_graph_scheduler.cpp
  extern/KaHIP/lib/partition/uncoarsening/refinement/kway_graph_refinement/kway_graph_refinement.cpp
  extern/KaHIP/lib/partition/uncoarsening/refinement/kway_graph_refinement/kway_graph_refinement_core.cpp
  extern/KaHIP/lib/partition/uncoarsening/refinement/label_propagation_refinement/label_propagation_refinement.cpp
  extern/KaHIP/lib/partition/uncoarsening/refinement/kway_graph_refinement/kway_graph_refinement_commons.cpp
  extern/KaHIP/lib/partition/uncoarsening/refinement/cycle_improvements/augmented_Qgraph_fabric.cpp
  extern/KaHIP/lib/partition/uncoarsening/refinement/cycle_improvements/advanced_models.cpp
  extern/KaHIP/lib/partition/uncoarsening/refinement/kway_graph_refinement/multitry_kway_fm.cpp
  extern/KaHIP/lib/algorithms/cycle_search.cpp
  extern/KaHIP/lib/partition/uncoarsening/refinement/cycle_improvements/cycle_refinement.cpp
  extern/KaHIP/lib/partition/uncoarsening/refinement/tabu_search/tabu_search.cpp
  extern/KaHIP/interface/kaHIP_interface.cpp
)

add_library(libkahip STATIC ${LIBKAHIP_FILES})

# ---------------------------------------------------------------------
# Build the vc_solver executable
# ---------------------------------------------------------------------
set(VC_SOLVER_SOURCES
  app/vc_solver.cpp
  # Additional VC Solver source files
  lib/tools/mis_log.cpp
  lib/mis/ils/ils.cpp
  lib/mis/ils/local_search.cpp
  lib/mis/initial_mis/greedy_mis.cpp
  lib/mis/initial_mis/greedy_vertex.cpp
  lib/mis/initial_mis/random_mis.cpp
  lib/mis/initial_mis/initial_mis.cpp
  lib/data_structure/mis_permutation.cpp
  lib/data_structure/candidate_list.cpp
  lib/data_structure/operation_log.cpp
  lib/data_structure/priority_queues/bucket_array.cpp
  lib/mis/exact_mis.cpp
  lib/mis/kernel/branch_and_reduce_algorithm.cpp
  lib/mis/kernel/modified.cpp
  lib/mis/evolutionary/population_mis.cpp
)

add_executable(vc_solver ${VC_SOLVER_SOURCES})

# Link the target against our libraries and any system libraries.
target_link_libraries(vc_solver libkahip argtable2 gcov)

# If static linking is desired, you can enforce static linking options.
set_target_properties(vc_solver PROPERTIES
  LINK_SEARCH_START_STATIC 1
  LINK_SEARCH_END_STATIC 1
)
